import cv2 as cv
import numpy as np


def make_line(image,line_param):
	slope, intercept= line_param
	y1=image.shape[0]
	y2= int(y1*(3/5))
	x1= int((y1-intercept)/slope)
	x2= int((y2-intercept)/slope)
	return np.array([x1,y1,x2,y2])


def avg_slope_intercept(image, lines):
	left=[]
	right=[]
	for line in lines:
		x1,y1,x2,y2= line.reshape(4)
		param= np.polyfit((x1,x2), (y1,y2), 1)
		slope= param[0]
		intercept= param[1]
		if slope<0:
			left.append((slope,intercept))
		else:
			right.append((slope,intercept))
	left_avg= np.average(left,axis=0)
	right_avg= np.average(right,axis=0)
	left_line= make_line(image,left_avg)
	right_line= make_line(image,right_avg)
	return np.array([left_line,right_line])


def canny(image):
	gray= cv.cvtColor(image, cv.COLOR_RGB2GRAY)
	blur= cv.GaussianBlur(gray, (5,5), 0)
	canny= cv.Canny(blur, 50, 150)
	return canny

def ROI(image):
	height= image.shape[0]
	polygons= np.array([[(200,height), (1100,height),(550,250)]])
	mask= np.zeros_like(image)
	cv.fillPoly(mask, polygons, 255)
	maskedimage= cv.bitwise_and(image, mask)
	return maskedimage

def lines(image,lines):
	line_image= np.zeros_like(image)
	if lines is not None:
		for line in lines:
			x1,y1,x2,y2= line.reshape(4)
			cv.line(line_image, (x1,y1), (x2,y2), (255,0,0), 10)
	return line_image

cap= cv.VideoCapture('test2.mp4')

while(cap.isOpened()):
	_,frame= cap.read()
	canny_image= canny(frame)
	ROI_image= ROI(canny_image)
	lines_= cv.HoughLinesP(ROI_image, 2, np.pi/180, 100,np.array([]),minLineLength=40,maxLineGap=5)
	avg_lines= avg_slope_intercept(frame, lines_)
	line_image= lines(frame, avg_lines)
	final_image= cv.addWeighted(frame, 0.8, line_image, 1, 1)
	cv.imshow('Result', final_image)
	cv.waitKey(1)
